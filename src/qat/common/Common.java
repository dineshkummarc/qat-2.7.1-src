package qat.common;/** * This class defines common strings and variables used throughout the QAT classes, to allow easy  * changing of default filesnames, directory locations etc. * * @version     2.3, 17 June 1999 * @author webhiker * */import java.io.File;import java.lang.System;import java.net.*;import java.awt.Color;import qat.common.Utils;public abstract class Common extends Object {	    public static final Color parserOutputForeground  = Color.black;    public static final Color parserOutputBackground = new Color(208,229,246);    public static final Color testDetailDescriptionForeground  = Color.black;    public static final Color testDetailDescriptionBackground = new Color(218,220,247);    public static final Color testDetailOutputForeground  = Color.black;    public static final Color testDetailOutputBackground = new Color(218,220,247);    /**     * This is the current version of the package.     * All classes refer to this variable when version control is needed.     */    // The following VERSION value should be automatically updated at build time    public static final String VERSION = "2.7.1";	    /**     * This is the current version of the serialized nodes used to allow backward compatibility     * with saved results.     */    public static final String SERIALIZED_NODE_HEADERV10      = "1.0";    public static final String SERIALIZED_NODE_HEADERV11      = "1.1";    public static final String SERIALIZED_NODE_HEADERV12      = "1.2";    public static final String SERIALIZED_NODE_HEADERV13      = "1.3";	    public static final String DiscoveryProbeString = "Agent Discovery Probe";    public static final int    MultiCastPort        = 55555;    public static final byte   TimeToLive           = 10;    public static final int    TimeToDiscover       = 3500;    public static final String MultiCastGroup       = "224.224.224.224";	    /**     * This is the default extension the QAT Harness will use for storing/retrieving      * project files via the system menu.     */    public static final String PROJECT_FILE_SUFFIX         = "prj";    /**     * This is the extension which will signify a file is compliant with the java.util.Properties definition.     */    public static final String PROPERTIES_EXTENSION        = "properties";    /**     * This is the extension used to store a serialized version of the Test Tree, to save time reparsing the tests      * each time the application is started/stopped.     */    public static final String SERIALIZED_TREE_EXTENSION   = "ser";	    /**     * This is the name of the file which will store the users last session values.     */    public static final String SESSION_FILE_NAME           = "session.properties";	    /**     * This directory will be created off the users home directory if it does not exists,     * and is used to store session info, and project results. It is used/created by both the agent and     * the harness.     */	    public static final String BASE_DIR_NAME               = ".qat";	    /**     * The name which will be used to suffix stdout trace files recieved from the agents.     */    public static final String STDOUT_TRACE_SUFFIX = ".stdout";	    /**     * The name which will be used to suffix stderr trace files recieved from the agents.     */    public static final String STDERR_TRACE_SUFFIX = ".stderr";	    /**     * The name which will be used to suffix environment trace files recieved from the agents.     */    public static final String ENV_TRACE_SUFFIX = ".env";	    /**     * The name which will be used to suffix trace files recieved from the agents.     */    public static final String PARSER_TRACE_SUFFIX = "_parser.trace";    /**     * This is the offset into the BASE_DIR_NAME used to store     * info related to the harness.     */    public static final String HARNESS_DIR_NAME            = "harness";	    /**     * This is the offset into the BASE_DIR_NAME used to store     * info related to the agent.     */    public static final String AGENT_DIR_NAME              = "agent";	    /**     * This is the offset into the HARNESS_DIR_NAME used to store     * info related to the harness results.     */    public static final String RESULTS_DIR_NAME            = "results";	    /**     * This is a variable visible to all test scripts indicating the root     * location of the test directory.     */    public static final String PROJECTPATH_KEY      = "qat.project.path";	    /**     * This key maps to the name of our current project name in the session.properties file.     */    public static final String PROJECT_PROPERTYNAME_KEY = "qat.project.name";	    /**     * This is the default name for a project.     */    public static final String DEFAULT_PROJECTNAME = "default";	    /**     * These are the agent name string used to reference defined agents     * from within the test scripts.     * Eg if only one agent is defined, it can be referred to in a      * test script as : AGENT1_NAME, AGENT1_PORT etc.     */    public static final String host            = "agent";    public static final String hostNamePattern = ".name";    public static final String hostPortPattern = ".port";    public static final String hostArchPattern = ".os.architecture";    public static final String hostOSPattern   = ".os.name";	    /**     * This variable indicates to the test scripts the number of agents      * which have been defined in this project session.     */    public static final String AGENT_COUNT    = "qat.agent.count";	    /**     * For internal use only. These are accesible from the harness GUI by     * editing the project options.     */	    public static final String PROPERTIES_VERSION            = "qat.project.properties_version";    public static final String CURRENT_PROPERTIES_VERSION    = SERIALIZED_NODE_HEADERV11;    public static final String LOOK_AND_FEEL_KEY             = "qat.project.look_and_feel";    public static final String HTTP_PORT_KEY                 = "qat.project.http_port";    public static final String HTTP_PORT_DEFAULT             = "9080";    public static final String AUTOSAVE_PROJECT              = "qat.project.autosave";    public static final String SYNTAX_HIGHLIGHTING           = "qat.project.syntax_hightlighting";    public static final String RESET_STATUS                  = "qat.project.reset_status";    public static final String REUSE_TRACE_WINDOW            = "qat.project.reuse_trace_window";    public static final String PARSER_CLASSNAMES             = "qat.project.parser.classnames";    public static final String TESTFINDER_CLASSNAMES         = "qat.project.testfinder.classnames";    public static final String PLUGIN_CLASSES                = "qat.project.plugin.classes";    public static final String DEFAULT_PARSER_CLASSNAMES     = "qat.parser.qashparser.QASHParser qat.parser.qaxmlparser.QAXMLParser qat.parser.junitparser.JUnitParser";    public static final String DEFAULT_TESTFINDER_CLASSNAMES = "qat.parser.qashparser.QASHTestFinder qat.parser.qaxmlparser.QAXMLTestFinder qat.parser.junitparser.JUnitTestFinder";    public static final String CONSOLE_BUFFER_SIZE           = "qat.project.console_buffer_size";    public static final String CONSOLE_BUFFER_SIZE_VALUE     = "28000";    public static final String CONSOLE_DEBUG_LEVEL           = "qat.project.console_debug_level";    public static final String CONSOLE_DEBUG_LEVEL_VALUE     = "10";    // ---- end ----    /**     * This returns the base directory used to store all the agent & harness files.     */    public static String getBaseDirectory() {	return System.getProperty("user.home",".")+File.separator+BASE_DIR_NAME;    }	    /**     * All files created by the harness are relative to this offset.     */    public static String getHarnessBaseDirectory() {	return getBaseDirectory()+File.separator+HARNESS_DIR_NAME;    }	    /**     * Returns the name of the project, without any file suffix or path info.     */    public static String getProjectName(String projectFileName) {	return Utils.removeSuffix(Utils.extractFileName(projectFileName));    }	    /**     * This is the directory, based on the project name, which contains all the traces from     * a given project run.     */    public static String getProjectResultsDirectory(String projectFileName) {	return Common.getHarnessBaseDirectory()+File.separator+RESULTS_DIR_NAME+File.separator+getProjectName(projectFileName);    }	    /**     * We create  a short unique name based on the hash value of the root portion     * of the path, concat with the name portion of the path.     */	     public static String getUniqueTestIdentifier(String testName) {	// 		try {	// 			testName = new File(testName).getCanonicalPath();	// 		}	// 		catch (Throwable ex) {	// 			ConsoleServer.debugStackTrace(ex);	// 		}	// 		return testName.replace(File.separator.charAt(0),'_').replace(':','_');	//return testName.replace(File.separator.charAt(0),'_').replace(':','_');	try {	    File f = new File(testName);	    String identifier = Integer.toString(Math.abs(f.getPath().hashCode()))+f.getName();	    return identifier;	}	catch (Throwable ex) {	    ConsoleServer.debugStackTrace(ex);	}	return null;    }}