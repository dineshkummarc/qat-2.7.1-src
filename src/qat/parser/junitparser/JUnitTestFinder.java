package qat.parser.junitparser;// JDK importsimport java.io.File;import java.net.URL;import java.net.URLClassLoader;// qat importsimport qat.parser.TestFinderInterface;import qat.parser.ParserInterface;public class JUnitTestFinder extends Object implements TestFinderInterface {    /**     * This is the file extension this TestFinder uses to determine whether a file will be      * treated as a test or not.     */    private static final String TEST_FILE_SUFFIX            = ".class";	    private String rootDirectory;    private FileClassLoader classLoader;    public JUnitTestFinder() {    }	    public void setProjectRoot(String rootDirectory) {	this.rootDirectory = rootDirectory;	try {	    classLoader = new FileClassLoader(rootDirectory);	}	catch (Throwable t) {	    t.printStackTrace();	}    }    /**     * Return true if this file is a JUnit file.     */    public boolean isTestFile(File file) {	if ((file.getName().toLowerCase().endsWith(TEST_FILE_SUFFIX))&&		(!isExcludePath(file))) {	    try {		String className = convertPathToClassName(file.getCanonicalPath(),rootDirectory);		//System.out.println("Trying too load "+className+" from root "+rootDirectory);		Class possibleTest = classLoader.loadClass(className);		//System.out.println("possibleTest="+possibleTest);		return (junit.framework.TestCase.class.isAssignableFrom(possibleTest));	    }	    catch (Throwable t) {		t.printStackTrace();	    }	}	return false;    }	    public static String convertPathToClassName(String pathToFile, String rootDirectory) {	String className;	// remove the suffix	className = pathToFile.substring(0,pathToFile.lastIndexOf(TEST_FILE_SUFFIX));	// remove the root path info	className = className.substring(className.indexOf(rootDirectory)+rootDirectory.length()+1,					className.length());	// convert to package name	className = className.replace('\\','.');	className = className.replace('/','.');	return className;    }    private boolean isExcludePath(File file) {	String path = file.getPath();	return ((path.indexOf("SCCS")>=0)|		(path.indexOf("deleted_files")>=0));    }    /**     * Return a parser for the specified file type, or null     * if it's not one we recognise.     */    public ParserInterface getParser(File file) {	if (isTestFile(file)) {	    JUnitParser parser = new qat.parser.junitparser.JUnitParser();	    parser.setProjectRoot(rootDirectory);	    return parser;	}	return null;    }}