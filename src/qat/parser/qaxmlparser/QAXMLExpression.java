package qat.parser.qaxmlparser;// JDK importsimport java.io.*;import java.util.*;import java.lang.*;import java.net.*;public class QAXMLExpression {    private static final String var_start = "${";    private static final String var_end   = "}";    private QAXMLExpression() {    }    /**     * Will resolve single variables such as "${var1}" and "${var2}" with the actual     * values referenced if available, else exception will be thrown.     * Nested or multiple variables are not allowed.     */    private static StringBuffer resolveSingleVariable(StringBuffer expression, Properties properties) throws Exception {	int start = expression.indexOf(var_start);	int end = expression.indexOf(var_end, start+1);	StringBuffer variable = removeVariableBraces(expression);	String value = properties.getProperty(variable.toString());	if (value==null) {	    throw new Exception("unidentified variable "+variable);	}	return new StringBuffer(value);    }    /**     * Will resolve variables such as "${var1${var2}}" with the actual     * values referenced if available, else exception will be thrown.     * Nested variables are allowed.     * e.g. ${var1${var2}}     */    public static StringBuffer resolveVariable(StringBuffer expression, Properties properties) throws Exception {	// make sure we don't modify the original string buffer	expression = new StringBuffer(expression.toString());	// loop until all variables have been referenced	while (expression.indexOf(var_start)>=0) {	    StringBuffer subExpression = getInnerExpression(expression);	    int start = expression.indexOf(subExpression.toString());	    expression.replace(start, start+subExpression.length(), 			       resolveSingleVariable(subExpression,properties).toString());	}	return expression;    }    /**     * This method returns the first encountered ${xxx} variable     * found in the expression.     */    private static StringBuffer getInnerExpression(StringBuffer expression) {	char prevChar, thisChar;	int start=-1, end=-1;	thisChar = expression.charAt(0);	for (int i = 1; i < expression.length(); i++) {	    prevChar = thisChar;	    thisChar = expression.charAt(i);	    if ((prevChar=='$')&&		(thisChar=='{')) {		start = i-1;	    }	    if (thisChar=='}') {		end = i+1;		return new StringBuffer(expression.substring(start, end));	    }	}	return expression;    }    /**     * Takes an expressionof the form "${xxx}" and returns "xxx".     */    public static StringBuffer removeVariableBraces(StringBuffer expression) {	int start = expression.indexOf(var_start);	int end = expression.indexOf(var_end, start+1);	return new StringBuffer(expression.substring(2, expression.length()-1));    }    public static final void main(String args[]) {	try {	    Properties properties = new Properties();	    properties.setProperty("var1","Stephen");	    properties.setProperty("var2","Kruger");	    properties.setProperty("compound1","Correct");	    properties.setProperty("compound2","1");	    StringBuffer test;	    test = new StringBuffer("${compound${compound2}}");	    System.out.println(test+" :  "+QAXMLExpression.resolveVariable(test,properties));	    test = new StringBuffer("${var1} ${var2}test");	    System.out.println(test+" :  "+QAXMLExpression.resolveVariable(test,properties));	    test = new StringBuffer("${compound${compound2}}");	    System.out.println(test+" :  "+QAXMLExpression.resolveVariable(test,properties));	    test = new StringBuffer("test${var1} ${var2}");	    System.out.println(test+" :  "+QAXMLExpression.resolveVariable(test,properties));	    test = new StringBuffer("compound${compound2}");	    System.out.println(test+" :  "+QAXMLExpression.resolveVariable(test,properties));	}	catch (Throwable t) {	    t.printStackTrace();	}    }}